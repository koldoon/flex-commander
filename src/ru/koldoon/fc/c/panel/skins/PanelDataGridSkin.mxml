<?xml version="1.0" encoding="utf-8"?>
<s:Skin
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark" xmlns:skins="ru.koldoon.fc.c.panel.skins.*"
    alpha.disabled="0.5" minWidth="90" minHeight="90">

    <fx:Metadata>
        [HostComponent("spark.components.DataGrid")]
    </fx:Metadata>

    <s:states>
        <s:State name="normal"/>
        <s:State name="disabled"/>
    </s:states>

    <fx:Declarations>
        <fx:Component id="alternatingRowColorsBackground">
            <s:Rect implements="spark.components.gridClasses.IGridVisualElement">
                <fx:Script>
                    <![CDATA[
                    import spark.components.DataGrid;
                    import spark.components.Grid;

                    public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void {
                        const dataGrid:DataGrid = grid.dataGrid;
                        if (!dataGrid) {
                            return;
                        }
                        const colors:Array = dataGrid.getStyle("alternatingRowColors");
                        if (colors && (colors.length > 0)) {
                            dataGrid.styleManager.getColorNames(colors); // lazily replace color names with ints
                            rowBackgroundFillColor.color = colors[rowIndex % colors.length];
                        }
                        else {
                            // This should be the same as bgFill.color.
                            rowBackgroundFillColor.color = 0xFFFFFF;
                        }
                    }
                    ]]>
                </fx:Script>
                <s:fill>
                    <s:SolidColor id="rowBackgroundFillColor" color="0xFFFFFF"/>
                </s:fill>
            </s:Rect>
        </fx:Component>

        <fx:Component id="caretIndicator">
            <s:Rect>
                <s:fill>
                    <s:SolidColor color="{palette.blue2}"/>
                </s:fill>
                <s:stroke>
                    <s:SolidColorStroke color="white" alpha="0.08" weight="2"/>
                </s:stroke>
                <fx:Script><![CDATA[
                    import ru.koldoon.fc.resources.styles.palette;
                    ]]></fx:Script>
            </s:Rect>
        </fx:Component>

        <fx:Component id="columnSeparator">
            <s:Line>
                <s:stroke>
                    <s:SolidColorStroke color="white" alpha="0.15" weight="2"/>
                </s:stroke>
            </s:Line>
        </fx:Component>

        <!---
         Defines the appearance of the drop indicator.
         The DataGrid's layout takes care to size and position the dropIndicator.
        -->
        <fx:Component id="dropIndicator">
            <s:Group>
                <s:Rect left="0" right="0" top="0" bottom="0">
                    <s:fill>
                        <!--- Defines the color of the background. -->
                        <s:SolidColor color="0xBBBBBB"/>
                    </s:fill>
                    <s:stroke>
                        <s:SolidColorStroke color="0x868686" weight="1"/>
                    </s:stroke>
                </s:Rect>
            </s:Group>
        </fx:Component>

        <!--- Defines the value of the columnSeparator property for the columnHeaderGroup. -->
        <fx:Component id="headerColumnSeparator">
            <s:Line>
                <s:stroke>
                    <s:SolidColorStroke color="0x696969" weight="1" caps="square"/>
                </s:stroke>
            </s:Line>
        </fx:Component>

        <fx:Component id="headerRenderer">
            <skins:PanelDataGridHeaderRenderer/>
        </fx:Component>

        <fx:Component id="hoverIndicator">
            <s:Rect implements="spark.components.gridClasses.IGridVisualElement">
                <fx:Script>
                    <![CDATA[
                    import spark.components.DataGrid;
                    import spark.components.Grid;

                    public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void {
                        const dataGrid:DataGrid = grid.dataGrid;
                        if (!dataGrid) {
                            return;
                        }
                        const color:uint = dataGrid.getStyle("rollOverColor");
                        hoverIndicatorFill.color = color;
                    }
                    ]]>
                </fx:Script>

                <s:fill>
                    <s:SolidColor id="hoverIndicatorFill" color="0xCEDBEF"/>
                </s:fill>
            </s:Rect>
        </fx:Component>

        <fx:Component id="lockedColumnsSeparator">
            <s:Group>
                <s:Line left="0" right="0" top="0" bottom="0">
                    <s:stroke>
                        <s:SolidColorStroke color="0x000000" weight="2" caps="square"/>
                    </s:stroke>
                </s:Line>
            </s:Group>
        </fx:Component>

        <fx:Component id="lockedRowsSeparator">
            <s:Group>
                <s:Line left="0" right="0" top="0" bottom="0">
                    <s:stroke>
                        <s:SolidColorStroke color="0x000000" weight="2" caps="square"/>
                    </s:stroke>
                </s:Line>
            </s:Group>
        </fx:Component>

        <!--<fx:Component id="rowSeparator">-->
            <!--<s:Line>-->
                <!--<s:stroke>-->
                    <!--<s:SolidColorStroke color="0xE6E6E6" weight="1" caps="square"/>-->
                <!--</s:stroke>-->
            <!--</s:Line>-->
        <!--</fx:Component>-->

        <fx:Component id="selectionIndicator">
            <s:Rect implements="spark.components.gridClasses.IGridVisualElement">
                <fx:Script>
                    <![CDATA[
                    import spark.components.DataGrid;
                    import spark.components.Grid;

                    public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void {
                        const dataGrid:DataGrid = grid.dataGrid;
                        if (!dataGrid) {
                            return;
                        }
                        const color:uint = dataGrid.getStyle("selectionColor");
                        selectionIndicatorFill.color = color;
                    }
                    ]]>
                </fx:Script>

                <s:fill>
                    <s:SolidColor id="selectionIndicatorFill" color="0xA8C6EE"/>
                </s:fill>
            </s:Rect>
        </fx:Component>

        <fx:Component id="editorIndicator">
            <s:Rect>
                <s:fill>
                    <s:SolidColor color="0xFFFFFF"/>
                </s:fill>
            </s:Rect>
        </fx:Component>

    </fx:Declarations>

    <!-- column header, content -->
    <s:VGroup horizontalAlign="justify" gap="0" left="0" right="0" top="0" bottom="0">

        <!---
         The GridColumnHeaderGroup's padding values are used to line it up with the Grid
         which is inset by the Scroller's minViewportInset, which provides room for the
         DataGrid border - the last Rect element below.
        -->
        <s:GridColumnHeaderGroup
            id="columnHeaderGroup" minHeight="40"
            paddingLeft="2" paddingRight="2" paddingTop="2"
            columnSeparator="{headerColumnSeparator}"
            headerRenderer="{headerRenderer}"/>

        <s:Group height="100%">
            <!-- header separator, scroller and grid -->
            <s:VGroup horizontalAlign="justify" height="100%" width="100%" gap="-1">
                <s:Line id="headerSeparator">
                    <s:stroke>
                        <s:SolidColorStroke color="0x696969" weight="1" caps="square"/>
                    </s:stroke>
                </s:Line>

                <s:Scroller id="scroller" minViewportInset="1" hasFocusableChildren="false" height="100%">
                    <s:Grid id="grid" itemRenderer="spark.skins.spark.DefaultGridItemRenderer">
                        <s:gridView>
                            <fx:Component>
                                <s:GridView>
                                    <s:GridLayer name="backgroundLayer"/>
                                    <s:GridLayer name="selectionLayer"/>
                                    <s:GridLayer name="editorIndicatorLayer"/>
                                    <s:GridLayer name="rendererLayer"/>
                                    <s:GridLayer name="overlayLayer"/>
                                </s:GridView>
                            </fx:Component>
                        </s:gridView>
                    </s:Grid>
                </s:Scroller>
            </s:VGroup>
        </s:Group>
    </s:VGroup>

</s:Skin>